#ifndef __GAME_HEADER__
#define __GAME_HEADER__
#include <HeaderBase.h>

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <scene.h>
#include <gameui.h>
#include <ngl/Camera.h>
#include <ngl/Material.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <ngl/VAOPrimitives.h>
#include <ngl/Transformation.h>
#include <QTime>
#include "environment.h"
#include <QElapsedTimer>
#include "Player.h"
#include "maze.h"
#include <QSet>
#include <ngl/ShaderLib.h>
#include <ngl/Obj.h>
#include "EggC.h"
#include "Plane.h"
#include "box.h"
#include "bullet.h"
#include "Collisions.h"
#include "moveobstacle.h"

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// startup function
extern void InitGame();
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// observers
class GameScene;
class GameKeyboard;
class GameMouseControl;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 2. class definition - GameScene
class GameScene: public SceneObserver
{
private:
    // time variavle to be passed into shader
    float m_time;


     Environment *m_Environment;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera m_cam;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a pointer to our maze
    //----------------------------------------------------------------------------------------------------------------------
    Maze *m_mazeP;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief previous player position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_oldPos;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief transformation for frawing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief load matrices to shader for cube
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShaderForCube();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief loads matrices to shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Automatic movement of player through map
    //----------------------------------------------------------------------------------------------------------------------
    void movePlayer();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief pointer to Player class
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<Player> m_player;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief pointer to cannon mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Obj> m_cannonMesh;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief for onscreen text
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text>m_text;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Controls for the player
    //----------------------------------------------------------------------------------------------------------------------
    void controlPlayer();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Checks for egg collisions
    //----------------------------------------------------------------------------------------------------------------------
    void eggCollision();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Stores texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureName;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Timer to handle events
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *_event);

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief If player is walking
    //----------------------------------------------------------------------------------------------------------------------
    bool m_playerWalk;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief If player is jumping
    //----------------------------------------------------------------------------------------------------------------------
    bool m_playerJump;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief If player is in jumping motion
    //----------------------------------------------------------------------------------------------------------------------
    bool m_playerJumpAnim;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief If player is dead
    //----------------------------------------------------------------------------------------------------------------------
    bool m_playerDie;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Controls camera position
    /// @param _playerPos; position of player
    /// @param _playerRot; rotation of player
    //----------------------------------------------------------------------------------------------------------------------
    void cameraFollow(ngl::Vec3 _playerPos, float _playerRot);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Array countaining eggs
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Egg> m_eggArray;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Previous game state
    //----------------------------------------------------------------------------------------------------------------------
    Game::State m_prevState;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Starts new game
    //----------------------------------------------------------------------------------------------------------------------
    void newGame();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Planes to check collision against
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Plane> m_planeArray;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Boxes to check collision against
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Box> m_boxArray;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Checks for wall collisions
    //----------------------------------------------------------------------------------------------------------------------
    void wallCollision();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief player's speed
    //----------------------------------------------------------------------------------------------------------------------
    float m_speed;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Checks for floor collisions
    //----------------------------------------------------------------------------------------------------------------------
    void floorCollision();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Strength of Gravity
    //----------------------------------------------------------------------------------------------------------------------
    float m_grav;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Player jump
    //----------------------------------------------------------------------------------------------------------------------
    void jump();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets gravity for player
    //----------------------------------------------------------------------------------------------------------------------
    void gravity();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief strength of jump
    //----------------------------------------------------------------------------------------------------------------------
    float m_jumpHt;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Boolean checking if 1st run through
    //----------------------------------------------------------------------------------------------------------------------
    bool m_firstTime;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Acceleration of player
    //----------------------------------------------------------------------------------------------------------------------
    float m_acceleration;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialize model
    //----------------------------------------------------------------------------------------------------------------------
    void initPlayerModel();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array containing all bullets
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Bullet> m_bulletArray;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Checks collisions with bullets
    //----------------------------------------------------------------------------------------------------------------------
    void bulletCollision();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Collision instance
    //----------------------------------------------------------------------------------------------------------------------
    Collisions *m_collision;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Checks through all collisions
    //----------------------------------------------------------------------------------------------------------------------
    void checkCollisions();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Loading in the mesh for the goal
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Obj> m_goalMesh;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Cannons to check collision against
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Box> m_cannonArray;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Loading in the mesh for the cloud
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Obj> m_cloudMesh;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Counter for cloud rotation
    //----------------------------------------------------------------------------------------------------------------------
    float m_cloudCounter;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Array for where the  horizontal moving obstacles are stored
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<MoveObstacle> m_moveObArrayH;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Array for where the vertical moving obstacles are stored
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<MoveObstacle> m_moveObArrayV;

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Moves the moving obstacles
    //----------------------------------------------------------------------------------------------------------------------
    void moveObCollision();

public:
    GameScene();
    bool onInitialize();
    void onRender();
    void onResize(int _x, int _y);

};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// class definition - GameKeyboard
class GameKeyboard: public KeyboardObserver
{
public:
    GameKeyboard();
};

#endif // __GAME_HEADER__
